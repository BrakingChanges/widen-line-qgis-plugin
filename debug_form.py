

"""
/***************************************************************************
 AerodromeUtilities
								 A QGIS plugin
 Fetches OSM Data and processes it for aerodroms with various algorithms
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
							  -------------------
		begin                : 2024-09-08
		copyright            : (C) 2024 by Aiden Omondi
		email                : helpertech83@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Aiden Omondi'
__date__ = '2025-03-19'
__copyright__ = '(C) 2025 by Aiden Omondi'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from .debugger import Debugger
import processing  # type: ignore

from .tools import load_ui, resolve
from qgis.PyQt.QtWidgets import QDialog, QPushButton, QLineEdit, QSpinBox
from qgis.gui import QgsFileWidget, QgisInterface
from qgis.core import QgsProject, QgsMapLayer, QgsVectorLayer
from qgis.PyQt.QtCore import QVariant, QUuid
from typing import Callable
from qgis.utils import iface as iface_import


FORM_CLASS = load_ui(resolve('debug.ui'))


class DebugForm(QDialog, FORM_CLASS):
	def __init__(self, debugger: Debugger,iface=None, parent=None):
		QDialog.__init__(self, parent)
		self.setupUi(self)
		self._iface = iface

		self.previous_colors = {}
		self.previous_groundradar_colors = {}
		self.previous_topsky_colors = {}

		self._debug_mode = False
		self.debug_callbacks: dict[str, Callable] = {}

		self.groundradar_file_widget: QgsFileWidget = self.groundradar_file_widget
		self.topsky_file_widget: QgsFileWidget = self.topsky_file_widget
		self.stands_file_widget: QgsFileWidget = self.stands_file_widget
		self.output_directory_file_widget: QgsFileWidget = self.output_directory_file_widget

		self.icao_input: QLineEdit = self.icao_input
		self.topsky_line_number_widget: QSpinBox = self.topsky_line_number_widget
		self.groundradar_line_number_widget: QSpinBox = self.groundradar_line_number_widget
		self.stands_line_number_widget: QSpinBox = self.stands_line_number

		self.run_button: QPushButton = self.run_button

		self.groundradar_file_path = None
		self.topsky_file_path = None
		self.stands_file_path = None
		self.output_directory_path = None
		self.icao_input_text = None
		self.topsky_line_number = None
		self.groundradar_line_number = None
		self.debugger = debugger

		self.groundradar_file_widget.fileChanged.connect(
			self.groundradar_file_changed)
		self.topsky_file_widget.fileChanged.connect(self.topsky_file_changed)
		self.stands_file_widget.fileChanged.connect(self.stands_file_changed)
		self.output_directory_file_widget.fileChanged.connect(
			self.output_directory_changed)

		self.icao_input.textChanged.connect(self.icao_input_changed)
		self.topsky_line_number_widget.textChanged.connect(
			self.topsky_line_number_changed)
		self.groundradar_line_number_widget.textChanged.connect(
			self.groundradar_line_number_changed)
		self.stands_line_number_widget.textChanged.connect(
			self.stands_line_number_changed)

		self.run_button.clicked.connect(self.run_debug)

	def groundradar_file_changed(self, file_path: str):
		self.groundradar_file_path = file_path

	def topsky_file_changed(self, file_path: str):
		self.topsky_file_path = file_path

	def stands_file_changed(self, file_path: str):
		self.stands_file_path = file_path

	def output_directory_changed(self, directory_path: str):
		self.output_directory_path = directory_path

	def icao_input_changed(self, text: str):
		self.icao_input_text = text

	def topsky_line_number_changed(self, text: str):
		self.topsky_line_number = int(text)

	def groundradar_line_number_changed(self, text: str):
		self.groundradar_line_number = int(text)

	def stands_line_number_changed(self, text: str):
		self.stands_line_number = int(text)

	def run_debug(self):
		self.debug_mode = True
		self.accept()

	@property
	def iface(self) -> QgisInterface:
		if self._iface:
			return self._iface
		return iface_import

	@property
	def debug_mode(self):
		return self._debug_mode

	@debug_mode.setter
	def debug_mode(self, value):
		if value is True:
			self.iface.messageBar().pushMessage("Debug Mode Enabled",
												"Debug mode has been enabled", level=0)
			self._debug_mode = value
			self.debugger.run(self.iface, self.output_directory_path, self.icao_input_text, self.groundradar_file_path,
							self.topsky_file_path, self.stands_file_path, self.groundradar_line_number, self.topsky_line_number,
							self.stands_line_number)


			for callback in self.debug_callbacks.values():
				callback(True)
		else:
			self.iface.messageBar().pushMessage("Debug Mode Disabled",
												"Debug mode has been disabled", level=0)
			self._debug_mode = value
			self.debugger.stop()
			if self.background_thread:
				self.background_thread.stop()

			for callback in self.debug_callbacks.values():
				callback(False)

	def add_debug_callback(self, callback: Callable):
		self.debug_callbacks[QUuid.createUuid().toString()] = callback

	def remove_debug_callback(self, id_: str):
		self.debug_callbacks.pop(id_)
