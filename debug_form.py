


"""
/***************************************************************************
 AerodromeUtilities
                                 A QGIS plugin
 Fetches OSM Data and processes it for aerodroms with various algorithms
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-09-08
        copyright            : (C) 2024 by Aiden Omondi
        email                : helpertech83@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Aiden Omondi'
__date__ = '2025-03-19'
__copyright__ = '(C) 2025 by Aiden Omondi'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import processing

from .tools import load_ui, resolve
from qgis.PyQt.QtWidgets import QDialog, QPushButton, QLineEdit, QSpinBox
from qgis.gui import QgsFileWidget
from qgis.core import QgsProject, QgsMapLayer, QgsVectorLayer
from qgis.PyQt.QtCore import QVariant
from qgis.utils import iface as iface_import


FORM_CLASS = load_ui(resolve('debug.ui'))

class DebugForm(QDialog, FORM_CLASS):
	def __init__(self, iface=None, parent=None):
		QDialog.__init__(self,parent)
		self.setupUi(self)
		self._iface = iface

		self.previous_colors = {}
		self.previous_groundradar_colors = {}
		self.previous_topsky_colors = {}

		self._debug_mode = False

		self.groundradar_file_widget: QgsFileWidget = self.groundradar_file_widget
		self.topsky_file_widget: QgsFileWidget = self.topsky_file_widget
		self.stands_file_widget: QgsFileWidget = self.stands_file_widget
		self.output_directory_file_widget: QgsFileWidget = self.output_directory_file_widget

		self.icao_input: QLineEdit = self.icao_input
		self.topsky_line_number_widget: QSpinBox = self.topsky_line_number_widget
		self.groundradar_line_number_widget: QSpinBox = self.groundradar_line_number_widget
		self.stands_line_number_widget: QSpinBox = self.stands_line_number

		self.run_button: QPushButton = self.run_button


		self.groundradar_file_path = None
		self.topsky_file_path = None
		self.stands_file_path = None
		self.output_directory_path = None
		self.icao_input_text = None
		self.topsky_line_number = None
		self.groundradar_line_number = None

		self.groundradar_file_widget.fileChanged.connect(self.groundradar_file_changed)
		self.topsky_file_widget.fileChanged.connect(self.topsky_file_changed)
		self.stands_file_widget.fileChanged.connect(self.stands_file_changed)
		self.output_directory_file_widget.fileChanged.connect(self.output_directory.changed)

		self.icao_input.textChanged.connect(self.icao_input_changed)
		self.topsky_line_number_widget.textChanged.connect(self.topsky_line_number_changed)
		self.groundradar_line_number_widget.textChanged.connect(self.groundradar_line_number_changed)
		self.stands_line_number_widget.textChanged.connect(self.stands_line_number_changed)

		self.run_button.clicked.connect(self.run_debug)


	
	def groundradar_file_changed(self, file_path: str):
		self.groundradar_file_path = file_path
	
	def topsky_file_changed(self, file_path: str):
		self.topsky_file_path = file_path
	
	def stands_file_changed(self, file_path: str):
		self.stands_file_path = file_path
	
	def output_directory_changed(self, directory_path: str):
		self.output_directory_path = directory_path
	
	def icao_input_changed(self, text: str):
		self.icao_input_text = text
	
	def topsky_line_number_changed(self, text: str):
		self.topsky_line_number = int(text)
	
	def groundradar_line_number_changed(self, text: str):
		self.groundradar_line_number = int(text)
	
	def stands_line_number_changed(self, text: str):
		self.stands_line_number = int(text)
	
	
	def run_debug(self):
		self.debug_mode = True
		self.accept()		


	def on_features_added(self, layer: QgsVectorLayer, feature_ids: list[int]):
		self.recompile()
		self.modify_file()


	def on_features_removed(self, layer: QgsVectorLayer, feature_ids: list[int]):
		self.recompile()
		self.modify_file()


	def on_attributes_changed(self, layer: QgsVectorLayer, changes: dict[int, dict[int, QVariant]]):
		self.recompile()
		self.modify_file()

	def on_layer_modified(self, layer: QgsVectorLayer):
		new_color = layer.customProperty('color', None)
		old_color = self.previous_colors.get(layer.id())

		new_ts_color = layer.customProperty('ts_color', None)
		old_ts_color = self.previous_topsky_colors.get(layer.id())

		new_gr_color = layer.customProperty('gr_color', None)
		old_gr_color = self.previous_groundradar_colors.get(layer.id())
	
		recompiled = False
		
		if new_color != old_color:
			recompiled = True
			self.recompile()
			self.previous_colors[layer.id()] = new_color
		
		if new_ts_color != old_ts_color:
			recompiled = True
			self.recompile()
			self.previous_topsky_colors[layer.id()] = new_ts_color
		
		if new_gr_color != old_gr_color:
			recompiled = True
			self.recompile()
			self.previous_groundradar_colors[layer.id()] = new_gr_color
		
		if recompiled:
			self.modify_file()
		


	def recompile(self):
		processing.run("aerodromeutilities:geojsontotopskygroundradar", {
			"OUT_DIR": self.output_directory_path,
			"ICAO": self.icao_input_text,
			"MULTI_MAP": False,
		})
	
	def modify_file(self):
		with open(f'{self.output_directory_path}/GroundRadar.txt', 'r+') as gr_file:
			lines = gr_file.readlines()
			lines[self.groundradar_line_number] = f'{self.groundradar_file_path}\n'
			gr_file.writelines(lines)
		
		with open(f'{self.output_directory_path}/TopSkyMaps.txt', 'r+') as ts_file:
			lines = ts_file.readlines()
			lines[self.topsky_line_number] = f'{self.topsky_file_path}\n'
			ts_file.writelines(lines)
		
		with open(f'{self.output_directory_path}/Stands.txt', 'r+') as stands_file:
			lines = stands_file.readlines()
			lines[self.stands_line_number] = f'{self.stands_file_path}\n'
			stands_file.writelines(lines)
	

		


	def connect_layer_signals(self, layer: QgsVectorLayer):
		layer.committedFeaturesAdded.connect(lambda fid: self.on_features_added(layer, fid))
		layer.committedFeaturesRemoved.connect(lambda fid: self.on_features_removed(layer, fid))
		layer.committedAttributeValuesChanges.connect(lambda fid, changes: self.on_attributes_changed(layer, changes))
		layer.layerModified.connect(lambda: self.on_layer_modified(layer))

	def disconnect_layer_signals(self, layer: QgsVectorLayer):
		layer.committedFeaturesAdded.disconnect()
		layer.committedFeaturesRemoved.disconnect()
		layer.committedAttributeValuesChanges.disconnect()
		layer.layerModified.disconnect()

	def watch_all_layers(self):
		""" Attach signals to all layers in the project """
		QgsProject.instance().layersAdded.connect(self.on_layers_added)
		for layer in QgsProject.instance().mapLayers().values():
			if layer.type() == QgsMapLayer.VectorLayer:  # Only vector layers can be edited
				self.connect_layer_signals(layer)

	def unwatch_all_layers(self):
		""" Detach signals from all layers in the project """
		QgsProject.instance().layersAdded.disconnect(self.on_layers_added)
		for layer in QgsProject.instance().mapLayers().values():
			if layer.type() == QgsMapLayer.VectorLayer:  # Only vector layers can be edited
				self.disconnect_layer_signals(layer)
	
	def on_layers_added(self, layers):
		""" Attach signals to newly added vector layers """
		for layer in layers:
			if isinstance(layer, QgsVectorLayer):
				self.connect_layer_signals(layer)

	@property
	def iface(self):
		if self._iface:
			return self._iface
		return iface_import

	@property
	def debug_mode(self):
		return self._debug_mode
	
	@debug_mode.setter
	def debug_mode(self, value):
		if value is True:
			self.iface.messageBar().pushMessage("Debug Mode Enabled", "Debug mode has been enabled", level=0)
			self._debug_mode = value
			self.watch_all_layers()
		else:
			self._iface.messageBar().pushMessage("Debug Mode Disabled", "Debug mode has been disabled", level=0)
			self._debug_mode = value
			self.unwatch_all_layers()
		